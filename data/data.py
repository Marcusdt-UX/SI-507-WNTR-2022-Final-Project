states = {'arizona': 'AZ',
 'arkansas': 'AR',
 'california': 'CA',
 'colorado': 'CO',
 'connecticut': 'CT',
 'delaware': 'DE',
 'district of columbia': 'DC',
 'florida': 'FL',
 'georgia': 'GA',
 'hawaii': 'HI',
 'idaho': 'ID',
 'illinois': 'IL',
 'indiana': 'IN',
 'iowa': 'IA',
 'kansas': 'KS',
 'kentucky': 'KY',
 'louisiana': 'LA',
 'maine': 'ME',
 'maryland': 'MD',
 'massachusetts': 'MA',
 'michigan': 'MI',
 'minnesota': 'MN',
 'mississippi': 'MS',
 'missouri': 'MO',
 'montana': 'MT',
 'nebraska': 'NE',
 'nevada': 'NV',
 'new hampshire': 'NH',
 'new jersey': 'NJ',
 'new mexico': 'NM',
 'new york': 'NY',
 'north carolina': 'NC',
 'north dakota': 'ND',
 'ohio': 'OH',
 'oklahoma': 'OK',
 'oregon': 'OR',
 'pennsylvania': 'PA',
 'puerto rico': 'PR',
 'rhode island': 'RI',
 'south carolina': 'SC',
 'south dakota': 'SD',
 'tennessee': 'TN',
 'texas': 'TX',
 'utah': 'UT',
 'vermont': 'VT',
 'virginia': 'VA',
 'virgin islands': 'VI',
 'washington': 'WA',
 'west virginia': 'WV',
 'wisconsin': 'WI',
 'wyoming': 'WY'}



country_codes = {'AD': 'Andorra',
 'AI': 'Anguilla',
 'AR': 'Argentina',
 'AU': 'Australia',
 'AT': 'Austria',
 'AZ': 'Azerbaijan',
 'BS': 'Bahamas',
 'BH': 'Bahrain',
 'BB': 'Barbados',
 'BE': 'Belgium',
 'BM': 'Bermuda',
 'BR': 'Brazil',
 'BG': 'Bulgaria',
 'CA': 'Canada',
 'CL': 'Chile',
 'CN': 'China',
 'CO': 'Colombia',
 'HR': 'Croatia',
 'CY': 'Cyprus',
 'DK': 'Denmark',
 'EC': 'Ecuador',
 'EE': 'Estonia',
 'FI': 'Finland',
 'FR': 'France',
 'GE': 'Georgia',
 'DE': 'Germany',
 'GH': 'Ghana',
 'GI': 'Gibraltar',
 'GR': 'Greece',
 'HU': 'Hungary',
 'IS': 'Iceland',
 'IN': 'India',
 'IE': 'Ireland',
 'IL': 'Israel',
 'IT': 'Italy',
 'JM': 'Jamaica',
 'JP': 'Japan',
 'LV': 'Latvia',
 'LB': 'Lebanon',
 'LT': 'Lithuania',
 'LU': 'Luxembourg',
 'MY': 'Malaysia',
 'MT': 'Malta',
 'MX': 'Mexico',
 'MC': 'Monaco',
 'ME': 'Montenegro',
 'MA': 'Morocco',
 'NL': 'Netherlands',
 'NO': 'Norway',
 'PE': 'Peru',
 'PL': 'Poland',
 'PT': 'Portugal',
 'RO': 'Romania',
 'RS': 'Serbia',
 'SG': 'Singapore',
 'SK': 'Slovakia',
 'SI': 'Slovenia',
 'ES': 'Spain',
 'SE': 'Sweden',
 'CH': 'Switzerland',
 'TW': 'Taiwan',
 'TH': 'Thailand',
 'TR': 'Turkey',
 'UA': 'Ukraine',
 'UY': 'Uruguay',
 'VE': 'Venezuela'}

inverted_country =  {'andorra': 'AD',
 'anguilla': 'AI',
 'argentina': 'AR',
 'australia': 'AU',
 'austria': 'AT',
 'azerbaijan': 'AZ',
 'bahamas': 'BS',
 'bahrain': 'BH',
 'barbados': 'BB',
 'belgium': 'BE',
 'bermuda': 'BM',
 'brazil': 'BR',
 'bulgaria': 'BG',
 'canada': 'CA',
 'chile': 'CL',
 'china': 'CN',
 'colombia': 'CO',
 'croatia': 'HR',
 'cyprus': 'CY',
 'denmark': 'DK',
 'ecuador': 'EC',
 'estonia': 'EE',
 'finland': 'FI',
 'france': 'FR',
 'georgia': 'GE',
 'germany': 'DE',
 'ghana': 'GH',
 'gibraltar': 'GI',
 'greece': 'GR',
 'hungary': 'HU',
 'iceland': 'IS',
 'india': 'IN',
 'ireland': 'IE',
 'israel': 'IL',
 'italy': 'IT',
 'jamaica': 'JM',
 'japan': 'JP',
 'latvia': 'LV',
 'lebanon': 'LB',
 'lithuania': 'LT',
 'luxembourg': 'LU',
 'malaysia': 'MY',
 'malta': 'MT',
 'mexico': 'MX',
 'monaco': 'MC',
 'montenegro': 'ME',
 'morocco': 'MA',
 'netherlands': 'NL',
 'norway': 'NO',
 'peru': 'PE',
 'poland': 'PL',
 'portugal': 'PT',
 'romania': 'RO',
 'serbia': 'RS',
 'singapore': 'SG',
 'slovakia': 'SK',
 'slovenia': 'SI',
 'spain': 'ES',
 'sweden': 'SE',
 'switzerland': 'CH',
 'taiwan': 'TW',
 'thailand': 'TH',
 'united states': 'US',
 'turkey': 'TR',
 'ukraine': 'UA',
 'uruguay': 'UY',
 'venezuela': 'VE'}

segments = [
"music", 
"sports",
"arts & theater", 
"family", 
"film", 
"miscellaneous"

]

class Data:
    def __init__(self, state_no,  countries, inverted) -> None:
        self.state_no = state_no
        self.countries = countries
        self.inverted_country = inverted

    def get_state(self, state):
        return self.state_no.get(state.lower(),None)

    def get_country(self,country):
        return self.inverted_country[country]


    def get_state_abbrev(self, state):
        return self.state_abbrev.get(state.lower(),None)



    def valid_countries(self):
        return list(self.countries.keys())    

    def valid_segment(self, segment):
        return segment in segments

data = Data(states,country_codes, inverted_country)
